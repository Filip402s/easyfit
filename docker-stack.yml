version: '3.7'

services:
  easyfit-api:
    image: easyfit-api:0.2.0-SNAPSHOT
    build:
      context: easyfit-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    # depends_on:
      # - db
    environment:
      # SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/easyfit?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5477/easyfit
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - backend
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  easyfit-ui:
    image: easyfit-ui:0.2.0-SNAPSHOT
    build:
      context: easyfit-ui
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://localhost:8080/api
    ports:
      - "9090:80"
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  # db:
  #   image: mysql:5.7
  #   ports:
  #     - "3306:3306"
  #   restart: always
  #   environment:
  #     MYSQL_DATABASE: easyfit
  #     MYSQL_USER: root
  #     MYSQL_PASSWORD: root
  #     MYSQL_ROOT_PASSWORD: root
  #   volumes:
  #     - db-data:/var/lib/mysql
  #   networks:
  #     - backend
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  
  # db:
  #   image: postgres:latest
  #   ports:
  #     - "5477:5432"
  #   restart: always
  #   environment:
  #     POSTGRES_DB: easyfit
  #     POSTGRES_USER: root
  #     POSTGRES_PASSWORD: root
  #     # POSTGRES_HOST_AUTH_METHOD: trust
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   networks:
  #     - backend
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure

volumes:
  db-data:

networks:
  backend:
  frontend:    